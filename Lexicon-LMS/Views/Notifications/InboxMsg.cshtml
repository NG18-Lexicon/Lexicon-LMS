@model Lexicon_LMS.Models.Notification
@using Lexicon_LMS.Models;
@using Microsoft.AspNet.Identity;
@using Microsoft.AspNet.Identity.Owin;


@{
    ApplicationUser user = System.Web.HttpContext.Current.GetOwinContext().GetUserManager<ApplicationUserManager>().FindById(User.Identity.GetUserId());
    string source = Model.Body;
    String[] stringSeparators = new string[] { ">>>" };
    string[] result = null;
    string populateReply = "On " + Model.DateSent + " " + Model.Sender.FullName + " wrote:" + Environment.NewLine + "\"" + Model.Body + "\"" + Environment.NewLine + ">>>" + Environment.NewLine;

    if (Model.Body.Contains(">>>"))
    {
        result = source.Split(stringSeparators, StringSplitOptions.None);
        populateReply = "";

        for (int i = 0; i < result.Length - 1; i++)
        {
            populateReply += result[i] + ">>>";
        }

        populateReply += "On " + Model.DateSent + " " + Model.Sender.FullName + " wrote:" + Environment.NewLine + "\"" + result.Last() + "\"" + Environment.NewLine + ">>>";

    }


}

<script>
    var url = "@Url.Action("InboxContainer", "Notifications")";
</script>

<div>
    <h4>Notification</h4>
    <hr />
    <dl class="dl-horizontal"
        style="
            width: 50%;
            margin: auto;
            outline: 1px solid;
            padding: 20px;
            ">
        <dt>From:</dt>
        <dd>
            @Html.ActionLink(Model.Sender.FullName, "ShowProfile", new { Controller = "Manage", action = "ShowProfile", UserName = Model.Sender.Email })
        </dd>
        <dt>To:</dt>
        @if (Model.Recipients.Count == 0)
        {
            <dd>@user.UserCourse.CourseName (@user.UserCourseCode)</dd>
        }
        else
        {
            foreach (var recipient in Model.Recipients)
            {
                <dd>@Html.ActionLink(recipient.FullName, "ShowProfile", new { Controller = "Manage", action = "ShowProfile", UserName = recipient.Email })</dd>
            }
        }

        <dt>
            @Html.DisplayNameFor(model => model.Subject)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Subject)
        </dd>

        <dd style=" margin: auto;
                    padding: 10px 0px 0px;
                    margin: 10px;
                    border-top: 1px solid;
                    min-height: 200px;

                    ">
            @if (result != null)
            {
                for (int i = 0; i < result.Length - 1; i++)
                {
                    <p style="color:lightgray">@result[i]</p>
                }
                <p>@result.Last()</p>
            }
            else
            {
                <p>@Model.Body</p>
            }

        </dd>
        @if(Model.Attachment!=null)
        {
        <dt>Attachment</dt>
        <dd>@Html.ActionLink("Download: " + Model.Attachment.DisplayName, "Download", new { filePath = Model.Attachment.Filepath, fileName = Model.Attachment.FileName, saveName = Model.Attachment.DisplayName })</dd>
        }
    </dl>
</div>
<p>
    @Html.ActionLink("Reply", "Create", new
    {
        Controller = "Notifications",
        action = "Create",
        uid = Model.Sender.Id,
        subject = "re: " + Model.Subject,
        body = populateReply
    }) |
    <a href="#&p=@TempData["page"]" onclick="$('#inbox').load(url),{page : @TempData["page"] }">Back to Inbox</a>
</p>
